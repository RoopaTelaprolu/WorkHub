package com.workhub.freelancebackend.config;

import io.jsonwebtoken.*;
import io.jsonwebtoken.jackson.io.JacksonDeserializer;
import io.jsonwebtoken.jackson.io.JacksonSerializer;

import io.jsonwebtoken.security.Keys;
import org.springframework.stereotype.Component;

import javax.crypto.SecretKey;
import java.util.Date;
import java.util.Map;

@Component
public class JwtUtil {

    private final String SECRET = "roopasecretkeymustbeatleast256bitslongbuddy";
    private final SecretKey key = Keys.hmacShaKeyFor(SECRET.getBytes());

    private final JwtParser parser = Jwts.parser()
            .verifyWith(key)
            .json(new JacksonDeserializer<>())
            .build();

    private final long EXPIRATION = 1000 * 60 * 60 * 10;

    public String generateToken(String username) {
        return Jwts.builder()
                .subject(username)
                .issuedAt(new Date())
                .expiration(new Date(System.currentTimeMillis() + EXPIRATION))
                .signWith(key)
                .serializeToJsonWith(new JacksonSerializer<>())
                .compact();
    }

    public String extractUsername(String token) {
        return parser.parseSignedClaims(token).getPayload().getSubject();
    }

    public boolean validateToken(String token, String userEmail) {
        String username = extractUsername(token);
        return (username.equals(userEmail) && !isTokenExpired(token));
    }

    private boolean isTokenExpired(String token) {
        Date expiration = parser.parseSignedClaims(token).getPayload().getExpiration();
        return expiration.before(new Date());
    }
}
