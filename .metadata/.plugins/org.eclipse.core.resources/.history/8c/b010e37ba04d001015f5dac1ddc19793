package com.workhub.freelancebackend.controller;

import com.workhub.freelancebackend.entity.Job;
import com.workhub.freelancebackend.entity.User;
import com.workhub.freelancebackend.repository.BidRepository;
import com.workhub.freelancebackend.repository.JobRepository;
import com.workhub.freelancebackend.repository.ReviewRepository;
import com.workhub.freelancebackend.repository.UserRepository;
import com.workhub.freelancebackend.service.UserService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;

@RestController
@RequestMapping("/api/users")
@CrossOrigin(origins = "*")
public class UserController {

    @Autowired
    private UserService userService;
    
    @Autowired
    private UserRepository userRepository;
    
    @Autowired
    private JobRepository jobRepository;
    
    @Autowired
    private BidRepository bidRepository;
    
    @Autowired
    private ReviewRepository reviewRepository;

    @PostMapping("/register")
    public User register(@RequestBody User user) {
        return userService.registerUser(user);
    }

    @GetMapping
    public ResponseEntity<List<User>> getAllUsers() {
        return ResponseEntity.ok(userRepository.findAll());
    }

    @GetMapping("/by-email")
    public User getUserByEmail(@RequestParam String email) {
        return userService.getUserByEmail(email)
                .orElseThrow(() -> new RuntimeException("User not found"));
    }
    
    @PostMapping("/login")
    public ResponseEntity<?> loginUser(@RequestBody Map<String, String> credentials) {
        String email = credentials.get("email");
        String password = credentials.get("password");

        Optional<User> user = userRepository.loginStrict(email, password);
        if (user.isPresent()) {
            return ResponseEntity.ok(user.get());
        } else {
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body("Invalid credentials");
        }
    }

    
    @DeleteMapping("/{id}")
    public ResponseEntity<?> deleteUser(@PathVariable Long id) {
        if (userRepository.existsById(id)) {
            userRepository.deleteById(id);
            return ResponseEntity.ok("User deleted");
        } else {
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body("User not found");
        }
    }
    
    @GetMapping("/freelancers")
    public ResponseEntity<List<User>> getAllFreelancers() {
        List<User> freelancers = userRepository.findByRole("freelancer");
        return ResponseEntity.ok(freelancers);
    }
    
    @GetMapping("/client/{id}/analytics")
    public ResponseEntity<Map<String, Object>> getClientStats(@PathVariable Long id) {
        List<Job> jobs = jobRepository.findByClientId(id);
        List<Long> jobIds = jobs.stream().map(Job::getId).toList();

        int totalJobs = jobs.size();
        int totalBids = bidRepository.countBidsByClientJobs(jobIds);
        Double avgRating = reviewRepository.getAverageRatingByClient(id);

        Map<String, Object> stats = new HashMap<>();
        stats.put("totalJobs", totalJobs);
        stats.put("totalBids", totalBids);
        stats.put("averageRating", avgRating != null ? avgRating : 0.0);

        return ResponseEntity.ok(stats);
    }
    
    @PutMapping("/{id}")
    public ResponseEntity<User> updateUserProfile(@PathVariable Long id, @RequestBody User updatedUser) {
        try {
            User updated = userService.updateUserProfile(id, updatedUser);
            return ResponseEntity.ok(updated);
        } catch (RuntimeException e) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND).build();
        }
    }
    
    @PostMapping(value = "/update-freelancer-profile", consumes = "multipart/form-data")
    public ResponseEntity<?> updateFreelancerProfile(
        @RequestParam Long userId,
        @RequestParam String skills,
        @RequestPart(required = false) MultipartFile profileImage) {

        Optional<User> userOpt = userRepository.findById(userId);
        if (userOpt.isEmpty()) return ResponseEntity.notFound().build();

        User user = userOpt.get();
        user.setSkills(skills);

        if (profileImage != null && !profileImage.isEmpty()) {
            try {
                String filename = UUID.randomUUID() + "_" + profileImage.getOriginalFilename();
                String uploadPath = "uploads/" + filename;

                File dir = new File("uploads");
                if (!dir.exists()) dir.mkdirs();

                profileImage.transferTo(new File(uploadPath));
                user.setProfilePictureUrl("/uploads/" + filename);
            } catch (IOException e) {
                return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Image upload failed.");
            }
        }

        User updated = userRepository.save(user);
        return ResponseEntity.ok(updated);
    }



}
